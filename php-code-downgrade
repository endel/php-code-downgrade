#!/usr/bin/php
<?php
ini_set('memory_limit', -1);
require(__DIR__ . '/vendor/autoload.php');

function glob_recursive($pattern, $flags = 0) {
  $files = glob($pattern, $flags);
  foreach (glob(dirname($pattern).'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $dir) {
    $files = array_merge($files, glob_recursive($dir.'/'.basename($pattern), $flags));
  }
  return $files;
}


$cli = new Commando\Command();
$cli->argument()
  ->describeAs('Directory with your codebase to be transformed.');

$cli->option('t')
  ->aka('transform')
  ->describeAs('Directory with custom transformations.');

$transform_instances = array();
if ($cli['t']) {
  $transforms = array();
  foreach(glob_recursive($cli['t'] . '/**.php') as $t) {
    require $t;
    $transform = basename($t, ".php");
    array_push($transforms, $transform);
    array_push($transform_instances, new $transform);
  }
  echo "Transformations to apply: " . join($transforms, ", ") . "\n\n";
}

if ($cli[0]) {
  $root_path = $cli[0];

  echo "** Warning **\n";
  echo "Every '$root_path/**.php' file will be changed into a downgraded PHP version.\n";
  echo "It's highly recommended to create a backup of those files.\n";
  echo "Continue? (y/n) ";

  $handle = fopen("php://stdin", 'r');
  $input = strtolower(trim(fgets($handle, 100)));
  if ($input !== "y") {
    die("Aborted.\n");
  }

} else {
  die("Usage:\n\tphp-code-downgrade [path]\n\n");
}

$files_to_retry = array();
$libraries_to_ignore = array();

$previous_dir = "";

function transform($file, $transform_instances) {
  $code = file_get_contents($file);

  $transformed_code = galapagos\transform_with_visitors($code, array_merge(
    galapagos\visitors(),
    $transform_instances
  ));

  file_put_contents($file, $transformed_code);
  echo "transform: {$file}\n";

  return true;
}

// // Disabled by now. We shoudn't ignore any file
//
// // libraries requiring version <= 5.3 should be ignored.
//
// foreach(glob_recursive($root_path . '/**/composer.json') as $composer_file)  {
//   $composer = json_decode(file_get_contents($composer_file), true);
//   if (isset($composer['require']) && isset($composer['require']['php'])) {
//     preg_match_all('/[0-9]+/', $composer['require']['php'], $versions);
//     $versions = array_map(function($str) { return intval($str); }, $versions[0]);
//
//     if ($versions[0] >= 5 && $versions[1] > 3) {
//       echo "{$composer_file}\n";
//     } else {
//       array_push($libraries_to_ignore, dirname($composer_file) . '/');
//     }
//   }
// }

$is_ignored = function($path) use ($libraries_to_ignore) {
  foreach($libraries_to_ignore as $library_to_ignore) {
    if (strpos($path, $library_to_ignore) !== false) {
      return true;
    }
  }
};

$i = 0;
foreach(glob_recursive($root_path . '/**.php') as $php_file)  {
  $i++;
  $dir = dirname($php_file);

  if (preg_match('/\/vendor\/composer\//', $php_file) ||
      $is_ignored($php_file)) {
    continue;
  }

  if ($dir != $previous_dir && count($files_to_retry) > 0) {
    foreach($files_to_retry as $i => $php_file_to_retry) {
      try {
        transform($php_file_to_retry, $transform_instances);
        $idx = array_search($php_file_to_retry, $files_to_retry);
        array_splice($files_to_retry, $idx);
      } catch (Exception $e) {
        echo "Need to retry... {$php_file_to_retry}\n";
      }
    }
  }

  if (!preg_match('/\/tests?\//i', $php_file)) {
    try {
      transform($php_file, $transform_instances);
    } catch (Exception $e) {
      array_push($files_to_retry, $php_file);
    }
  }

  $previous_dir = $dir;
}

echo "Done.\n";
